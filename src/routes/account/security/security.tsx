import {addAuthenticator, getAuthenticators} from "@/api/authenticators";
import {Button} from "@/components/ui/button";
import {Separator} from "@/components/ui/separator";
import {PasskeyAuthenticator, VerificationMethod} from "@/types/authenticator";
import {format} from "date-fns";
import {QueryClient, queryOptions, useQueryClient, useSuspenseQuery} from "@tanstack/react-query";
import {authsignal} from "@/lib/authsignal";
import {useToast} from "@/hooks/use-toast";
import {RemovePasskeyDialog} from "./remove-passkey-dialog";
import {Badge} from "@/components/ui/badge";
import {EnvelopeClosedIcon, MobileIcon} from "@radix-ui/react-icons";
import {AddAuthenticatorAppDialog} from "./add-authenticator-app-dialog";
import {AddEmailMagicLinkDialog} from "./add-email-magic-link-dialog";
import {useState} from "react";
import {RemoveAuthenticatorAppDialog} from "./remove-authenticator-app-dialog";

const authenticatorsQuery = () =>
  queryOptions({
    queryKey: ["authenticators"],
    queryFn: getAuthenticators,
  });

export const loader = (queryClient: QueryClient) => async () => {
  const authenticators = await queryClient.ensureQueryData(authenticatorsQuery());

  return {authenticators};
};

export function Security() {
  const {data: authenticators} = useSuspenseQuery(authenticatorsQuery());

  const passkeys = authenticators.filter(
    (authenticator) => authenticator.verificationMethod === VerificationMethod.PASSKEY,
  );

  const authenticatorApp = authenticators.find(
    (authenticator) => authenticator.verificationMethod === VerificationMethod.AUTHENTICATOR_APP,
  );

  const emailMagicLink = authenticators.find(
    (authenticator) => authenticator.verificationMethod === VerificationMethod.EMAIL_MAGIC_LINK,
  );

  return (
    <div className="flex flex-col gap-y-6">
      <div>
        <h3 className="text-lg font-medium">Security</h3>
        <p className="text-sm text-muted-foreground">Manage your security settings.</p>
      </div>
      <Separator />
      <div>
        <h4 className="text-lg font-medium">Passkeys</h4>
        <p className="text-sm text-muted-foreground">
          Passkeys allow you to validate your identity using touch, facial recognition, a device password, or a PIN.
        </p>
      </div>
      <PasskeysList passkeys={passkeys} />
      <div>
        <h4 className="text-lg font-medium">Multi-factor authentication</h4>
        <p className="text-sm text-muted-foreground">
          Multi-factor authentication adds an additional layer of security to your account by requiring more than just a
          password to sign in.
        </p>
      </div>
      <ul className="flex flex-col gap-y-4">
        <li className="border p-4 rounded">
          <div className="flex items-center justify-between">
            <div className="flex gap-x-2">
              <MobileIcon className="size-6" />
              <div>
                <div className="flex items-center gap-x-2">
                  <h5 className="font-medium">Authenticator app</h5>
                  {authenticatorApp && (
                    <Badge className="text-green-800 bg-green-100 border-none" variant="outline">
                      Enabled
                    </Badge>
                  )}
                </div>
                <span className="text-sm text-muted-foreground">Use codes generated by an authenticator app.</span>
              </div>
            </div>
            {authenticatorApp ? (
              <RemoveAuthenticatorAppDialog authenticator={authenticatorApp} />
            ) : (
              <AddAuthenticatorAppDialog />
            )}
          </div>
        </li>
        <li className="border p-4 rounded">
          <div className="flex items-center justify-between">
            <div className="flex gap-x-2">
              <EnvelopeClosedIcon className="size-6" />
              <div>
                <div className="flex items-center gap-x-2">
                  <h5 className="font-medium">Email magic link</h5>
                  {emailMagicLink && (
                    <Badge className="text-green-800 bg-green-100 border-none" variant="outline">
                      Enabled
                    </Badge>
                  )}
                </div>
                <span className="text-sm text-muted-foreground">Use a link sent to your email.</span>
              </div>
            </div>
            {emailMagicLink ? <AddEmailMagicLinkDialog /> : <AddEmailMagicLinkDialog />}
          </div>
        </li>
      </ul>
    </div>
  );
}

type PasskeysListProps = {
  passkeys: PasskeyAuthenticator[];
};

function PasskeysList({passkeys}: PasskeysListProps) {
  const [isLoading, setIsLoading] = useState(false);

  const queryClient = useQueryClient();

  const {toast} = useToast();

  const handleAddPasskey = async () => {
    setIsLoading(true);

    const errorToast = () => {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to add passkey",
      });
    };

    try {
      const {authsignalToken} = await addAuthenticator();

      authsignal.setToken(authsignalToken);

      const passkeySignUpResponse = await authsignal.passkey.signUp({
        token: authsignalToken,
        authenticatorAttachment: null,
      });

      if (!passkeySignUpResponse || "error" in passkeySignUpResponse) {
        errorToast();
      }

      queryClient.invalidateQueries({queryKey: ["authenticators"]});
    } catch (e: unknown) {
      if (e instanceof Object && "code" in e && e.code === "ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED") {
        toast({
          variant: "destructive",
          title: "Error",
          description: "This passkey already exists.",
        });
      } else {
        errorToast();
      }
    }

    setIsLoading(false);
  };

  return (
    <>
      {passkeys.length > 0 && (
        <ul className="flex flex-col gap-y-4">
          {passkeys.map((passkey) => {
            const {
              userAuthenticatorId,
              lastVerifiedAt,
              verifiedAt,
              webauthnCredential: {name, aaguidMapping},
            } = passkey;

            return (
              <li
                className="grid sm:grid-cols-3 items-center justify-between gap-x-3 gap-y-2 border p-4 rounded"
                key={userAuthenticatorId}
              >
                <div className="flex items-center gap-x-1.5">
                  {aaguidMapping?.svgIconLight ? (
                    <img src={aaguidMapping.svgIconLight} alt="" className="h-6 w-6" />
                  ) : null}
                  <span className="font-medium">{name}</span>
                </div>
                <div className="flex flex-col gap-1">
                  {verifiedAt && (
                    <span className="text-sm">
                      <span className="font-medium">Created:</span> {format(new Date(verifiedAt), "d MMM y")}
                    </span>
                  )}
                  {lastVerifiedAt && (
                    <span className="text-sm">
                      <span className="font-medium">Last used:</span> {format(new Date(lastVerifiedAt), "d MMM y")}
                    </span>
                  )}
                </div>
                <div className="justify-self-end">
                  <RemovePasskeyDialog passkey={passkey} />
                </div>
              </li>
            );
          })}
        </ul>
      )}
      <Button
        disabled={isLoading}
        isLoading={isLoading}
        loadingMessage="Pending"
        onClick={handleAddPasskey}
        className="self-start"
      >
        Add a passkey
      </Button>
    </>
  );
}
